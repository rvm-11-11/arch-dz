{
	"info": {
		"_postman_id": "304b499c-fbe5-4502-b068-681332ead390",
		"name": "Arch Final Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "health check all",
			"item": [
				{
					"name": "health check tours service Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "health check orders service Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8082/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "health check payments service Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8083/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8083",
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "health check flights service Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8084/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8084",
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "health check hotels service Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8085/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "reset all",
			"item": [
				{
					"name": "reset tours",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours/reset",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "reset users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/users/reset",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"users",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "reset orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/orders/reset",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"orders",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "reset payments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8083/payments/reset",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8083",
							"path": [
								"payments",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "reset flights bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8084/flights/reset",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8084",
							"path": [
								"flights",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "reset hotels bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8085/hotelsBookings/reset",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"hotelsBookings",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "reset successful orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/successfulOrders/reset",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"successfulOrders",
								"reset"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NEW user management",
			"item": [
				{
					"name": "create admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"admin1_username\", pm.variables.replaceIn('{{$randomUserName}}'));",
									"pm.globals.set(\"admin1_firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
									"pm.globals.set(\"admin1_lastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
									"pm.globals.set(\"admin1_email\", pm.variables.replaceIn('{{$randomExampleEmail}}'));",
									"pm.globals.set(\"admin1_password\", pm.variables.replaceIn('{{$randomPassword}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"adminId\", jsonData.userId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{admin1_username}}\",\n    \"firstName\": \"{{admin1_firstName}}\",\n    \"lastName\": \"{{admin1_lastName}}\",\n    \"email\": \"{{admin1_email}}\",\n    \"password\": \"{{admin1_password}}\",\n    \"role\": \"ADMIN\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/users/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "create customer 1 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"customerId1\", jsonData.userId);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"customer1_username\", pm.variables.replaceIn('{{$randomUserName}}'));",
									"pm.globals.set(\"customer1_firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
									"pm.globals.set(\"customer1_lastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
									"pm.globals.set(\"customer1_email\", pm.variables.replaceIn('{{$randomExampleEmail}}'));",
									"pm.globals.set(\"customer1_password\", pm.variables.replaceIn('{{$randomPassword}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{customer1_username}}\",\n    \"firstName\": \"{{customer1_firstName}}\",\n    \"lastName\": \"{{customer1_lastName}}\",\n    \"email\": \"{{customer1_email}}\",\n    \"password\": \"{{customer1_password}}\",\n    \"role\": \"CUSTOMER\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/users/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "create customer 2 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"customerId2\", jsonData.userId);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"customer2_username\", pm.variables.replaceIn('{{$randomUserName}}'));",
									"pm.globals.set(\"customer2_firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
									"pm.globals.set(\"customer2_lastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
									"pm.globals.set(\"customer2_email\", pm.variables.replaceIn('{{$randomExampleEmail}}'));",
									"pm.globals.set(\"customer2_password\", pm.variables.replaceIn('{{$randomPassword}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{customer2_username}}\",\n    \"firstName\": \"{{customer2_firstName}}\",\n    \"lastName\": \"{{customer2_lastName}}\",\n    \"email\": \"{{customer2_email}}\",\n    \"password\": \"{{customer2_password}}\",\n    \"role\": \"CUSTOMER\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/users/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "check 3 users created with proper roles Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check 3 users created\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.length).to.eql(3);",
									"",
									"    var expectedUser1 = {",
									"        \"userId\": pm.globals.get(\"adminId\"),",
									"        \"role\": \"ADMIN\"",
									"    };",
									"    pm.expect(pm.response.json()).to.deep.include(expectedUser1);",
									"",
									"    var expectedUser2 = {",
									"        \"userId\": pm.globals.get(\"customerId1\"),",
									"        \"role\": \"CUSTOMER\"",
									"    };",
									"    pm.expect(pm.response.json()).to.deep.include(expectedUser2);",
									"",
									"    var expectedUser3 = {",
									"        \"userId\": pm.globals.get(\"customerId2\"),",
									"        \"role\": \"CUSTOMER\"",
									"    };",
									"    pm.expect(pm.response.json()).to.deep.include(expectedUser3);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "tours service tests",
			"item": [
				{
					"name": "health check tours service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "check no tours yet Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check no tours yet\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to create tour not authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is UNAUTHORIZED\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Request-User",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mountains view\",\r\n    \"description\": \"You will be skiing in most beautiful mountans in Europe\",\r\n    \"price\": 7000,\r\n    \"fromDate\": \"2021-07-15\",\r\n    \"toDate\": \"2021-07-22\",\r\n    \"fromDestination\": \"Moscow\",\r\n    \"toDestination\": \"Innsbruck\",\r\n    \"hotelId\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours"
							]
						}
					},
					"response": []
				},
				{
					"name": "try to create tour not admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is FORBIDDEN\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Request-User",
								"value": "{{customerId1}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mountains view\",\r\n    \"description\": \"You will be skiing in most beautiful mountans in Europe\",\r\n    \"price\": 7000,\r\n    \"fromDate\": \"2021-07-15\",\r\n    \"toDate\": \"2021-07-22\",\r\n    \"fromDestination\": \"Moscow\",\r\n    \"toDestination\": \"Innsbruck\",\r\n    \"hotelId\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours"
							]
						}
					},
					"response": []
				},
				{
					"name": "create tour 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"tourId1\", jsonData.tourId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Request-User",
								"value": "{{adminId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mountains view\",\r\n    \"description\": \"You will be skiing in most beautiful mountans in Europe\",\r\n    \"price\": 7000,\r\n    \"fromDate\": \"2021-07-15\",\r\n    \"toDate\": \"2021-07-22\",\r\n    \"fromDestination\": \"Moscow\",\r\n    \"toDestination\": \"Innsbruck\",\r\n    \"hotelId\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours"
							]
						}
					},
					"response": []
				},
				{
					"name": "check tour 1 created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check tour1 created\", function () {",
									"",
									"    var expectedTour = {",
									"        \"tourId\": pm.globals.get(\"tourId1\"),",
									"        \"name\": \"Mountains view\",",
									"        \"description\": \"You will be skiing in most beautiful mountans in Europe\",",
									"        \"price\": 7000,",
									"        \"fromDate\": \"2021-07-15T00:00:00Z\",",
									"        \"toDate\": \"2021-07-22T00:00:00Z\",",
									"        \"fromDestination\": \"Moscow\",",
									"        \"toDestination\": \"Innsbruck\",",
									"        \"hotelId\": 5",
									"    };",
									"",
									"    pm.expect(pm.response.json()).to.deep.include(expectedTour);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours/{{tourId1}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours",
								"{{tourId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update tour 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Auth-Request-User",
								"value": "{{adminId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mountains view\",\r\n    \"description\": \"You will be skiing in most beautiful mountans in Europe\",\r\n    \"price\": 3500,\r\n    \"fromDate\": \"2021-07-15\",\r\n    \"toDate\": \"2021-07-22\",\r\n    \"fromDestination\": \"Moscow\",\r\n    \"toDestination\": \"Murmansk\",\r\n    \"hotelId\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours/{{tourId1}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours",
								"{{tourId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check tour 1 updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check tour1 created\", function () {",
									"",
									"    var expectedTour = {",
									"        \"tourId\": pm.globals.get(\"tourId1\"),",
									"        \"name\": \"Mountains view\",",
									"        \"description\": \"You will be skiing in most beautiful mountans in Europe\",",
									"        \"price\": 3500,",
									"        \"fromDate\": \"2021-07-15T00:00:00Z\",",
									"        \"toDate\": \"2021-07-22T00:00:00Z\",",
									"        \"fromDestination\": \"Moscow\",",
									"        \"toDestination\": \"Murmansk\",",
									"        \"hotelId\": 5",
									"    };",
									"    ",
									"    pm.expect(pm.response.json()).to.deep.include(expectedTour);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours/{{tourId1}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours",
								"{{tourId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create tour 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"tourId2\", jsonData.tourId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Request-User",
								"value": "{{adminId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"North Yachting\",\r\n    \"description\": \"You will be yachting in most beautiful fjords in Europe\",\r\n    \"price\": 4999,\r\n    \"fromDate\": \"2021-09-10\",\r\n    \"toDate\": \"2021-09-17\",\r\n    \"fromDestination\": \"Saint Petersburg\",\r\n    \"toDestination\": \"Oslo\",\r\n    \"hotelId\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours"
							]
						}
					},
					"response": []
				},
				{
					"name": "check tour 2 created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check tour 2 created\", function () {",
									"",
									"    var expectedTour = {",
									"        \"tourId\": pm.globals.get(\"tourId2\"),",
									"        \"name\": \"North Yachting\",",
									"        \"description\": \"You will be yachting in most beautiful fjords in Europe\",",
									"        \"price\": 4999,",
									"        \"fromDate\": \"2021-09-10T00:00:00Z\",",
									"        \"toDate\": \"2021-09-17T00:00:00Z\",",
									"        \"fromDestination\": \"Saint Petersburg\",",
									"        \"toDestination\": \"Oslo\",",
									"        \"hotelId\": 5",
									"    };",
									"",
									"    pm.expect(pm.response.json()).to.deep.include(expectedTour);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours/{{tourId2}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours",
								"{{tourId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create tour 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"tourId3\", jsonData.tourId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Request-User",
								"value": "{{adminId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mountains view\",\r\n    \"description\": \"You will be skiing in most beautiful mountans in Europe\",\r\n    \"price\": 3500,\r\n    \"fromDate\": \"2021-07-15\",\r\n    \"toDate\": \"2021-07-22\",\r\n    \"fromDestination\": \"Moscow\",\r\n    \"toDestination\": \"Pskov\",\r\n    \"hotelId\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours"
							]
						}
					},
					"response": []
				},
				{
					"name": "check 3 tours exist already",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check 3 tours exist already\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.eql(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete tour 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Auth-Request-User",
								"value": "{{adminId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours/{{tourId3}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours",
								"{{tourId3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check only 2 tours left",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check 2 tours left\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.length).to.eql(2);",
									"    var expectedTour1 = {",
									"        \"tourId\": pm.globals.get(\"tourId1\"),",
									"        \"name\": \"Mountains view\",",
									"        \"description\": \"You will be skiing in most beautiful mountans in Europe\",",
									"        \"price\": 3500,",
									"        \"fromDate\": \"2021-07-15T00:00:00Z\",",
									"        \"toDate\": \"2021-07-22T00:00:00Z\",",
									"        \"fromDestination\": \"Moscow\",",
									"        \"toDestination\": \"Murmansk\",",
									"        \"hotelId\": 5",
									"    };",
									"",
									"    pm.expect(pm.response.json()).to.deep.include(expectedTour1);",
									"",
									"    var expectedTour2 = {",
									"        \"tourId\": pm.globals.get(\"tourId2\"),",
									"        \"name\": \"North Yachting\",",
									"        \"description\": \"You will be yachting in most beautiful fjords in Europe\",",
									"        \"price\": 4999,",
									"        \"fromDate\": \"2021-09-10T00:00:00Z\",",
									"        \"toDate\": \"2021-09-17T00:00:00Z\",",
									"        \"fromDestination\": \"Saint Petersburg\",",
									"        \"toDestination\": \"Oslo\",",
									"        \"hotelId\": 5",
									"    };",
									"",
									"    pm.expect(pm.response.json()).to.deep.include(expectedTour2);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours"
							]
						}
					},
					"response": []
				},
				{
					"name": "create tour 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"tourId4\", jsonData.tourId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Request-User",
								"value": "{{adminId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mountains view\",\r\n    \"description\": \"You will be skiing in most beautiful mountains in Europe\",\r\n    \"price\": 6500,\r\n    \"fromDate\": \"2021-07-15\",\r\n    \"toDate\": \"2021-07-22\",\r\n    \"fromDestination\": \"Moscow\",\r\n    \"toDestination\": \"Zurich\",\r\n    \"hotelId\": 15\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours"
							]
						}
					},
					"response": []
				},
				{
					"name": "create tour 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"tourId5\", jsonData.tourId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Request-User",
								"value": "{{adminId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"City walk\",\r\n    \"description\": \"You will be staying in most beautiful district in Europe\",\r\n    \"price\": 5,\r\n    \"fromDate\": \"2021-07-15\",\r\n    \"toDate\": \"2021-07-16\",\r\n    \"fromDestination\": \"Saint Petersburg\",\r\n    \"toDestination\": \"Kupchino\",\r\n    \"hotelId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours"
							]
						}
					},
					"response": []
				},
				{
					"name": "check tours filtered and sorted properly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check 2 tours returned sorted and filtering applied\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.length).to.eql(2);",
									"    var expectedTour1 = {",
									"        \"tourId\": pm.globals.get(\"tourId5\"),",
									"        \"name\": \"City walk\",",
									"        \"description\": \"You will be staying in most beautiful district in Europe\",",
									"        \"price\": 5,",
									"        \"fromDate\": \"2021-07-15T00:00:00Z\",",
									"        \"toDate\": \"2021-07-16T00:00:00Z\",",
									"        \"fromDestination\": \"Saint Petersburg\",",
									"        \"toDestination\": \"Kupchino\",",
									"        \"hotelId\": 1",
									"    };",
									"",
									"    pm.expect(pm.response.json()[0]).to.deep.include(expectedTour1);",
									"",
									"    var expectedTour2 = {",
									"        \"tourId\": pm.globals.get(\"tourId2\"),",
									"        \"name\": \"North Yachting\",",
									"        \"description\": \"You will be yachting in most beautiful fjords in Europe\",",
									"        \"price\": 4999,",
									"        \"fromDate\": \"2021-09-10T00:00:00Z\",",
									"        \"toDate\": \"2021-09-17T00:00:00Z\",",
									"        \"fromDestination\": \"Saint Petersburg\",",
									"        \"toDestination\": \"Oslo\",",
									"        \"hotelId\": 5",
									"    };",
									"",
									"    pm.expect(pm.response.json()[1]).to.deep.include(expectedTour2);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/tours/SearchFilter?orderField=price&fromDestination=Saint%20Petersburg",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"tours",
								"SearchFilter"
							],
							"query": [
								{
									"key": "orderField",
									"value": "price"
								},
								{
									"key": "fromDestination",
									"value": "Saint%20Petersburg"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "orders service tests",
			"item": [
				{
					"name": "health check orders service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8082/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order 1 -- try to buy tour all good",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"orderId1\", jsonData.orderId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Request-User",
								"value": "{{customerId1}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tourId\": {{tourId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "check order 1 completely approved",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check order 1 completely approved\", function () {",
									"",
									"    var expectedOrder = {",
									"        \"orderId\": parseInt(pm.globals.get(\"orderId1\")),",
									"        \"tourId\": parseInt(pm.globals.get(\"tourId1\")),",
									"        \"userId\": pm.globals.get(\"customerId1\"),",
									"        \"paymentStatus\": \"APPROVED\",",
									"        \"flightBookingStatus\": \"APPROVED\",",
									"        \"hotelBookingStatus\": \"APPROVED\",",
									"        \"overallStatus\": \"APPROVED\"",
									"    };",
									"",
									"    pm.expect(pm.response.json()).to.deep.include(expectedOrder);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order 1 -- try to do same order again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Conflict\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Request-User",
								"type": "text",
								"value": "{{customerId1}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tourId\": {{tourId1}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order 2 -- try to buy tour too expensive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"orderId2\", jsonData.orderId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Request-User",
								"value": "{{customerId1}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tourId\": {{tourId4}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "check order 2 rejected because payment rejected",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check order 2 payment rejected\", function () {",
									"",
									"    var expectedOrder = {",
									"        \"orderId\": parseInt(pm.globals.get(\"orderId2\")),",
									"        \"tourId\": parseInt(pm.globals.get(\"tourId4\")),",
									"        \"userId\": \"customerId1\",",
									"        \"paymentStatus\": \"REJECTED\",",
									"        \"flightBookingStatus\": \"APPROVED\",",
									"        \"hotelBookingStatus\": \"APPROVED\",",
									"        \"overallStatus\": \"REJECTED\"",
									"    };",
									"",
									"    pm.expect(pm.response.json()).to.deep.include(expectedOrder);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "check order 2 flight booking rolled back",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check flight booking rolled back\", function () {",
									"",
									"    var expectedBooking =     {",
									"        \"flightId\": parseInt(pm.globals.get(\"orderId2\")),",
									"        \"orderId\": parseInt(pm.globals.get(\"orderId2\")),",
									"        \"fromDestination\": \"Moscow\",",
									"        \"toDestination\": \"Zurich\",",
									"        \"flightStatus\": \"ROLLED_BACK\"",
									"    };",
									"",
									"    pm.expect(pm.response.json()).to.deep.include(expectedBooking);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8084/flights",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8084",
							"path": [
								"flights"
							]
						}
					},
					"response": []
				},
				{
					"name": "check order 2 hotel booking rolled back",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check order 2 payment rejected\", function () {",
									"",
									"    var expectedBooking =     {",
									"        \"hotelBookingId\": parseInt(pm.globals.get(\"orderId2\")),",
									"        \"orderId\": parseInt(pm.globals.get(\"orderId2\")),",
									"        \"hotelId\": 15,",
									"        \"hotelBookingStatus\": \"ROLLED_BACK\"",
									"    };",
									"",
									"    pm.expect(pm.response.json()).to.deep.include(expectedBooking);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8085/hotelsBookings",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"hotelsBookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "order 3 -- try to buy tour no flight available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"orderId3\", jsonData.orderId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Request-User",
								"value": "{{customerId1}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 5,\n    \"tourId\": {{tourId2}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "check order 3 rejected because flight booking rejected",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check order 3 payment rejected\", function () {",
									"",
									"    var expectedOrder = {",
									"        \"orderId\": parseInt(pm.globals.get(\"orderId3\")),",
									"        \"tourId\": parseInt(pm.globals.get(\"tourId2\")),",
									"        \"userId\": pm.globals.get(\"customerId1\"),",
									"        \"paymentStatus\": \"APPROVED\",",
									"        \"flightBookingStatus\": \"REJECTED\",",
									"        \"hotelBookingStatus\": \"APPROVED\",",
									"        \"overallStatus\": \"REJECTED\"",
									"    };",
									"",
									"    pm.expect(pm.response.json()).to.deep.include(expectedOrder);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "order 4 -- try to buy tour no hotel available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"orderId4\", jsonData.orderId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Auth-Request-User",
								"value": "{{customerId1}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tourId\": {{tourId5}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "check order 4 rejected because hotel booking rejected",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check order 4 hotel booking rejected\", function () {",
									"",
									"    var expectedOrder = {",
									"        \"orderId\": parseInt(pm.globals.get(\"orderId4\")),",
									"        \"tourId\": parseInt(pm.globals.get(\"tourId5\")),",
									"        \"userId\": \"customerId1\",",
									"        \"paymentStatus\": \"APPROVED\",",
									"        \"flightBookingStatus\": \"APPROVED\",",
									"        \"hotelBookingStatus\": \"REJECTED\",",
									"        \"overallStatus\": \"REJECTED\"",
									"    };",
									"",
									"    pm.expect(pm.response.json()).to.deep.include(expectedOrder);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "check successfulOrders search index updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check successful order index updated\", function () {",
									"",
									"    var expectedOrder =     {",
									"        \"successfulOrderId\": ",
									"        parseInt(pm.globals.get(\"tourId5\")) + 1,",
									"        \"tourId\": parseInt(pm.globals.get(\"tourId1\")),",
									"        \"tourName\": \"Mountains view\",",
									"        \"tourDescription\": \"You will be skiing in most beautiful mountans in Europe\",",
									"        \"price\": 3500,",
									"        \"fromDate\": \"2021-07-15T00:00:00Z\",",
									"        \"toDate\": \"2021-07-22T00:00:00Z\",",
									"        \"fromDestination\": \"Moscow\",",
									"        \"toDestination\": \"Murmansk\",",
									"        \"hotelId\": 5,",
									"        \"userId\": pm.globals.get(\"customerId1\"),",
									"        // \"userName\": \"Alex\",",
									"        \"overallOrderStatus\": \"APPROVED\"",
									"    };",
									"",
									"    pm.expect(pm.response.json()).to.deep.include(expectedOrder);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/successfulOrders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"successfulOrders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "payments service test",
			"item": [
				{
					"name": "health check payments service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8083/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8083",
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all payments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8083/payments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8083",
							"path": [
								"payments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "flights service",
			"item": [
				{
					"name": "health check flights service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8084/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8084",
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all flights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8084/flights",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8084",
							"path": [
								"flights"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "hotels service",
			"item": [
				{
					"name": "health check hotels service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8085/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all hotel bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8085/hotelsBookings",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"hotelsBookings"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OLD users management",
			"item": [
				{
					"name": "create admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"adminId\", jsonData.userId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Vasya\",\n    \"role\": \"ADMIN\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "create customer 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"customerId1\", jsonData.userId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Alex\",\n    \"role\": \"CUSTOMER\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "create customer 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"customerId2\", jsonData.userId);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Ivan\",\n    \"role\": \"CUSTOMER\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "check 3 users created with proper roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check 3 users created\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.length).to.eql(3);",
									"",
									"    var expectedUser1 = {",
									"        \"userId\": pm.globals.get(\"adminId\"),",
									"        \"name\": \"Vasya\",",
									"        \"role\": \"ADMIN\"",
									"    };",
									"    pm.expect(pm.response.json()).to.deep.include(expectedUser1);",
									"",
									"    var expectedUser2 = {",
									"        \"userId\": pm.globals.get(\"customerId1\"),",
									"        \"name\": \"Alex\",",
									"        \"role\": \"CUSTOMER\"",
									"    };",
									"    pm.expect(pm.response.json()).to.deep.include(expectedUser2);",
									"",
									"    var expectedUser3 = {",
									"        \"userId\": pm.globals.get(\"customerId2\"),",
									"        \"name\": \"Ivan\",",
									"        \"role\": \"CUSTOMER\"",
									"    };",
									"    pm.expect(pm.response.json()).to.deep.include(expectedUser3);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8081/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Keycloak Copy",
			"item": [
				{
					"name": "Keycloak: get token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"keycloak-access-token\", pm.response.json()[\"access_token\"]);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "admin-cli",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrlDomain}}/auth/realms/master/protocol/openid-connect/token",
							"host": [
								"{{baseUrlDomain}}"
							],
							"path": [
								"auth",
								"realms",
								"master",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Keycloak: add user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{keycloak-access-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"firstName1\",\n    \"lastName\": \"lastName1\",\n    \"email\": \"test1@example.com\",\n    \"enabled\": \"true\",\n    \"username\": \"dummy5\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlDomain}}/auth/admin/realms/myrealm/users",
							"host": [
								"{{baseUrlDomain}}"
							],
							"path": [
								"auth",
								"admin",
								"realms",
								"myrealm",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Keycloak: get user by name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{keycloak-access-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlDomain}}/auth/admin/realms/myrealm/users?username=dummy2",
							"host": [
								"{{baseUrlDomain}}"
							],
							"path": [
								"auth",
								"admin",
								"realms",
								"myrealm",
								"users"
							],
							"query": [
								{
									"key": "username",
									"value": "dummy2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Keycloak OIDC",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlDomain}}/auth/realms/myrealm/.well-known/openid-configuration",
							"host": [
								"{{baseUrlDomain}}"
							],
							"path": [
								"auth",
								"realms",
								"myrealm",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Keycloak no SSL",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlDomain}}/auth/realms/myrealm/.well-known/openid-configuration",
							"host": [
								"{{baseUrlDomain}}"
							],
							"path": [
								"auth",
								"realms",
								"myrealm",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Keycloak: get all users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{keycloak-access-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlDomain}}/auth/admin/realms/myrealm/users",
							"host": [
								"{{baseUrlDomain}}"
							],
							"path": [
								"auth",
								"admin",
								"realms",
								"myrealm",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Keycloak: get all users Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{keycloak-access-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://arch.homework/auth/admin/realms/myrealm/users",
							"protocol": "https",
							"host": [
								"arch",
								"homework"
							],
							"path": [
								"auth",
								"admin",
								"realms",
								"myrealm",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Keycloak: update user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{keycloak-access-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"firstName111\",\n    \"lastName\": \"lastName1\",\n    \"email\": \"test@example223.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://keycloak.192.168.49.2.nip.io/auth/admin/realms/myrealm/users/7611b007-3242-438f-99f3-17c56b729971",
							"protocol": "https",
							"host": [
								"keycloak",
								"192",
								"168",
								"49",
								"2",
								"nip",
								"io"
							],
							"path": [
								"auth",
								"admin",
								"realms",
								"myrealm",
								"users",
								"7611b007-3242-438f-99f3-17c56b729971"
							]
						}
					},
					"response": []
				},
				{
					"name": "Keycloak: get token Copy",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "admin-cli",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://192.168.49.2:31320/auth/realms/master/protocol/openid-connect/token",
							"protocol": "http",
							"host": [
								"192",
								"168",
								"49",
								"2"
							],
							"port": "31320",
							"path": [
								"auth",
								"realms",
								"master",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-UserId",
								"type": "text",
								"value": "7611b007-3242-438f-99f3-17c56b729971"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Import realm",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{keycloak-access-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"myrealm\",\n  \"realm\": \"myrealm\",\n  \"notBefore\": 0,\n  \"revokeRefreshToken\": false,\n  \"refreshTokenMaxReuse\": 0,\n  \"accessTokenLifespan\": 300,\n  \"accessTokenLifespanForImplicitFlow\": 900,\n  \"ssoSessionIdleTimeout\": 1800,\n  \"ssoSessionMaxLifespan\": 36000,\n  \"ssoSessionIdleTimeoutRememberMe\": 0,\n  \"ssoSessionMaxLifespanRememberMe\": 0,\n  \"offlineSessionIdleTimeout\": 2592000,\n  \"offlineSessionMaxLifespanEnabled\": false,\n  \"offlineSessionMaxLifespan\": 5184000,\n  \"clientSessionIdleTimeout\": 0,\n  \"clientSessionMaxLifespan\": 0,\n  \"clientOfflineSessionIdleTimeout\": 0,\n  \"clientOfflineSessionMaxLifespan\": 0,\n  \"accessCodeLifespan\": 60,\n  \"accessCodeLifespanUserAction\": 300,\n  \"accessCodeLifespanLogin\": 1800,\n  \"actionTokenGeneratedByAdminLifespan\": 43200,\n  \"actionTokenGeneratedByUserLifespan\": 300,\n  \"enabled\": true,\n  \"sslRequired\": \"external\",\n  \"registrationAllowed\": true,\n  \"registrationEmailAsUsername\": false,\n  \"rememberMe\": false,\n  \"verifyEmail\": false,\n  \"loginWithEmailAllowed\": true,\n  \"duplicateEmailsAllowed\": false,\n  \"resetPasswordAllowed\": false,\n  \"editUsernameAllowed\": false,\n  \"bruteForceProtected\": false,\n  \"permanentLockout\": false,\n  \"maxFailureWaitSeconds\": 900,\n  \"minimumQuickLoginWaitSeconds\": 60,\n  \"waitIncrementSeconds\": 60,\n  \"quickLoginCheckMilliSeconds\": 1000,\n  \"maxDeltaTimeSeconds\": 43200,\n  \"failureFactor\": 30,\n  \"defaultRoles\": [\n    \"uma_authorization\",\n    \"offline_access\"\n  ],\n  \"requiredCredentials\": [\n    \"password\"\n  ],\n  \"otpPolicyType\": \"totp\",\n  \"otpPolicyAlgorithm\": \"HmacSHA1\",\n  \"otpPolicyInitialCounter\": 0,\n  \"otpPolicyDigits\": 6,\n  \"otpPolicyLookAheadWindow\": 1,\n  \"otpPolicyPeriod\": 30,\n  \"otpSupportedApplications\": [\n    \"FreeOTP\",\n    \"Google Authenticator\"\n  ],\n  \"webAuthnPolicyRpEntityName\": \"keycloak\",\n  \"webAuthnPolicySignatureAlgorithms\": [\n    \"ES256\"\n  ],\n  \"webAuthnPolicyRpId\": \"\",\n  \"webAuthnPolicyAttestationConveyancePreference\": \"not specified\",\n  \"webAuthnPolicyAuthenticatorAttachment\": \"not specified\",\n  \"webAuthnPolicyRequireResidentKey\": \"not specified\",\n  \"webAuthnPolicyUserVerificationRequirement\": \"not specified\",\n  \"webAuthnPolicyCreateTimeout\": 0,\n  \"webAuthnPolicyAvoidSameAuthenticatorRegister\": false,\n  \"webAuthnPolicyAcceptableAaguids\": [],\n  \"webAuthnPolicyPasswordlessRpEntityName\": \"keycloak\",\n  \"webAuthnPolicyPasswordlessSignatureAlgorithms\": [\n    \"ES256\"\n  ],\n  \"webAuthnPolicyPasswordlessRpId\": \"\",\n  \"webAuthnPolicyPasswordlessAttestationConveyancePreference\": \"not specified\",\n  \"webAuthnPolicyPasswordlessAuthenticatorAttachment\": \"not specified\",\n  \"webAuthnPolicyPasswordlessRequireResidentKey\": \"not specified\",\n  \"webAuthnPolicyPasswordlessUserVerificationRequirement\": \"not specified\",\n  \"webAuthnPolicyPasswordlessCreateTimeout\": 0,\n  \"webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister\": false,\n  \"webAuthnPolicyPasswordlessAcceptableAaguids\": [],\n  \"scopeMappings\": [\n    {\n      \"clientScope\": \"offline_access\",\n      \"roles\": [\n        \"offline_access\"\n      ]\n    }\n  ],\n  \"clientScopeMappings\": {\n    \"account\": [\n      {\n        \"client\": \"account-console\",\n        \"roles\": [\n          \"manage-account\"\n        ]\n      }\n    ]\n  },\n  \"clients\": [\n    {\n      \"id\": \"b671ef4d-cb2d-438d-8b79-444bf41459fe\",\n      \"clientId\": \"account\",\n      \"name\": \"${client_account}\",\n      \"description\": \"tet=sskdjs-flkhsdlkjsdfj;hl\",\n      \"rootUrl\": \"${authBaseUrl}\",\n      \"baseUrl\": \"/realms/myrealm/account/\",\n      \"surrogateAuthRequired\": false,\n      \"enabled\": true,\n      \"alwaysDisplayInConsole\": false,\n      \"clientAuthenticatorType\": \"client-secret\",\n      \"secret\": \"a1095886-3254-459c-8066-95c6613bc111\",\n      \"defaultRoles\": [\n        \"view-profile\",\n        \"manage-account\"\n      ],\n      \"redirectUris\": [\n        \"*\"\n      ],\n      \"webOrigins\": [],\n      \"notBefore\": 0,\n      \"bearerOnly\": false,\n      \"consentRequired\": false,\n      \"standardFlowEnabled\": true,\n      \"implicitFlowEnabled\": false,\n      \"directAccessGrantsEnabled\": false,\n      \"serviceAccountsEnabled\": false,\n      \"publicClient\": false,\n      \"frontchannelLogout\": false,\n      \"protocol\": \"openid-connect\",\n      \"attributes\": {\n        \"saml.assertion.signature\": \"false\",\n        \"saml.force.post.binding\": \"false\",\n        \"saml.multivalued.roles\": \"false\",\n        \"saml.encrypt\": \"false\",\n        \"backchannel.logout.revoke.offline.tokens\": \"false\",\n        \"saml.server.signature\": \"false\",\n        \"saml.server.signature.keyinfo.ext\": \"false\",\n        \"exclude.session.state.from.auth.response\": \"false\",\n        \"backchannel.logout.session.required\": \"false\",\n        \"client_credentials.use_refresh_token\": \"false\",\n        \"saml_force_name_id_format\": \"false\",\n        \"saml.client.signature\": \"false\",\n        \"tls.client.certificate.bound.access.tokens\": \"false\",\n        \"saml.authnstatement\": \"false\",\n        \"display.on.consent.screen\": \"false\",\n        \"saml.onetimeuse.condition\": \"false\"\n      },\n      \"authenticationFlowBindingOverrides\": {},\n      \"fullScopeAllowed\": false,\n      \"nodeReRegistrationTimeout\": 0,\n      \"defaultClientScopes\": [\n        \"web-origins\",\n        \"role_list\",\n        \"profile\",\n        \"roles\",\n        \"email\"\n      ],\n      \"optionalClientScopes\": [\n        \"address\",\n        \"phone\",\n        \"offline_access\",\n        \"microprofile-jwt\"\n      ]\n    },\n    {\n      \"id\": \"cc0ae2fa-b735-4a4a-bbc7-8751419ebde2\",\n      \"clientId\": \"account-console\",\n      \"name\": \"${client_account-console}\",\n      \"rootUrl\": \"${authBaseUrl}\",\n      \"baseUrl\": \"/realms/myrealm/account/\",\n      \"surrogateAuthRequired\": false,\n      \"enabled\": true,\n      \"alwaysDisplayInConsole\": false,\n      \"clientAuthenticatorType\": \"client-secret\",\n      \"secret\": \"**********\",\n      \"redirectUris\": [\n        \"/realms/myrealm/account/*\"\n      ],\n      \"webOrigins\": [],\n      \"notBefore\": 0,\n      \"bearerOnly\": false,\n      \"consentRequired\": false,\n      \"standardFlowEnabled\": true,\n      \"implicitFlowEnabled\": false,\n      \"directAccessGrantsEnabled\": false,\n      \"serviceAccountsEnabled\": false,\n      \"publicClient\": true,\n      \"frontchannelLogout\": false,\n      \"protocol\": \"openid-connect\",\n      \"attributes\": {\n        \"pkce.code.challenge.method\": \"S256\"\n      },\n      \"authenticationFlowBindingOverrides\": {},\n      \"fullScopeAllowed\": false,\n      \"nodeReRegistrationTimeout\": 0,\n      \"protocolMappers\": [\n        {\n          \"id\": \"ff2e4386-6c45-48a0-a47c-d7e1f506c1dc\",\n          \"name\": \"audience resolve\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-audience-resolve-mapper\",\n          \"consentRequired\": false,\n          \"config\": {}\n        }\n      ],\n      \"defaultClientScopes\": [\n        \"web-origins\",\n        \"role_list\",\n        \"profile\",\n        \"roles\",\n        \"email\"\n      ],\n      \"optionalClientScopes\": [\n        \"address\",\n        \"phone\",\n        \"offline_access\",\n        \"microprofile-jwt\"\n      ]\n    },\n    {\n      \"id\": \"f1a7d1d0-f371-4097-97b5-cd19c351180c\",\n      \"clientId\": \"admin-cli\",\n      \"name\": \"${client_admin-cli}\",\n      \"surrogateAuthRequired\": false,\n      \"enabled\": true,\n      \"alwaysDisplayInConsole\": false,\n      \"clientAuthenticatorType\": \"client-secret\",\n      \"secret\": \"**********\",\n      \"redirectUris\": [],\n      \"webOrigins\": [],\n      \"notBefore\": 0,\n      \"bearerOnly\": false,\n      \"consentRequired\": false,\n      \"standardFlowEnabled\": false,\n      \"implicitFlowEnabled\": false,\n      \"directAccessGrantsEnabled\": true,\n      \"serviceAccountsEnabled\": false,\n      \"publicClient\": true,\n      \"frontchannelLogout\": false,\n      \"protocol\": \"openid-connect\",\n      \"attributes\": {},\n      \"authenticationFlowBindingOverrides\": {},\n      \"fullScopeAllowed\": false,\n      \"nodeReRegistrationTimeout\": 0,\n      \"defaultClientScopes\": [\n        \"web-origins\",\n        \"role_list\",\n        \"profile\",\n        \"roles\",\n        \"email\"\n      ],\n      \"optionalClientScopes\": [\n        \"address\",\n        \"phone\",\n        \"offline_access\",\n        \"microprofile-jwt\"\n      ]\n    },\n    {\n      \"id\": \"ba4d8b9b-22f8-4a14-b1d0-2e8d7f3b490a\",\n      \"clientId\": \"broker\",\n      \"name\": \"${client_broker}\",\n      \"surrogateAuthRequired\": false,\n      \"enabled\": true,\n      \"alwaysDisplayInConsole\": false,\n      \"clientAuthenticatorType\": \"client-secret\",\n      \"secret\": \"**********\",\n      \"redirectUris\": [],\n      \"webOrigins\": [],\n      \"notBefore\": 0,\n      \"bearerOnly\": false,\n      \"consentRequired\": false,\n      \"standardFlowEnabled\": true,\n      \"implicitFlowEnabled\": false,\n      \"directAccessGrantsEnabled\": false,\n      \"serviceAccountsEnabled\": false,\n      \"publicClient\": false,\n      \"frontchannelLogout\": false,\n      \"protocol\": \"openid-connect\",\n      \"attributes\": {},\n      \"authenticationFlowBindingOverrides\": {},\n      \"fullScopeAllowed\": false,\n      \"nodeReRegistrationTimeout\": 0,\n      \"defaultClientScopes\": [\n        \"web-origins\",\n        \"role_list\",\n        \"profile\",\n        \"roles\",\n        \"email\"\n      ],\n      \"optionalClientScopes\": [\n        \"address\",\n        \"phone\",\n        \"offline_access\",\n        \"microprofile-jwt\"\n      ]\n    },\n    {\n      \"id\": \"fde09ea1-2a65-41db-a3ca-29a01e13c544\",\n      \"clientId\": \"myclient\",\n      \"rootUrl\": \"https://www.keycloak.org/app/\",\n      \"adminUrl\": \"https://www.keycloak.org/app/\",\n      \"surrogateAuthRequired\": false,\n      \"enabled\": true,\n      \"alwaysDisplayInConsole\": false,\n      \"clientAuthenticatorType\": \"client-secret\",\n      \"secret\": \"**********\",\n      \"redirectUris\": [\n        \"https://www.keycloak.org/app/*\"\n      ],\n      \"webOrigins\": [\n        \"https://www.keycloak.org\"\n      ],\n      \"notBefore\": 0,\n      \"bearerOnly\": false,\n      \"consentRequired\": false,\n      \"standardFlowEnabled\": true,\n      \"implicitFlowEnabled\": false,\n      \"directAccessGrantsEnabled\": true,\n      \"serviceAccountsEnabled\": false,\n      \"publicClient\": true,\n      \"frontchannelLogout\": false,\n      \"protocol\": \"openid-connect\",\n      \"attributes\": {\n        \"backchannel.logout.session.required\": \"true\",\n        \"backchannel.logout.revoke.offline.tokens\": \"false\"\n      },\n      \"authenticationFlowBindingOverrides\": {},\n      \"fullScopeAllowed\": true,\n      \"nodeReRegistrationTimeout\": -1,\n      \"defaultClientScopes\": [\n        \"web-origins\",\n        \"role_list\",\n        \"profile\",\n        \"roles\",\n        \"email\"\n      ],\n      \"optionalClientScopes\": [\n        \"address\",\n        \"phone\",\n        \"offline_access\",\n        \"microprofile-jwt\"\n      ]\n    },\n    {\n      \"id\": \"3a5e1108-0eb7-4d7b-bb7a-4245d60da51c\",\n      \"clientId\": \"realm-management\",\n      \"name\": \"${client_realm-management}\",\n      \"surrogateAuthRequired\": false,\n      \"enabled\": true,\n      \"alwaysDisplayInConsole\": false,\n      \"clientAuthenticatorType\": \"client-secret\",\n      \"secret\": \"**********\",\n      \"redirectUris\": [],\n      \"webOrigins\": [],\n      \"notBefore\": 0,\n      \"bearerOnly\": true,\n      \"consentRequired\": false,\n      \"standardFlowEnabled\": true,\n      \"implicitFlowEnabled\": false,\n      \"directAccessGrantsEnabled\": false,\n      \"serviceAccountsEnabled\": false,\n      \"publicClient\": false,\n      \"frontchannelLogout\": false,\n      \"protocol\": \"openid-connect\",\n      \"attributes\": {},\n      \"authenticationFlowBindingOverrides\": {},\n      \"fullScopeAllowed\": false,\n      \"nodeReRegistrationTimeout\": 0,\n      \"defaultClientScopes\": [\n        \"web-origins\",\n        \"role_list\",\n        \"profile\",\n        \"roles\",\n        \"email\"\n      ],\n      \"optionalClientScopes\": [\n        \"address\",\n        \"phone\",\n        \"offline_access\",\n        \"microprofile-jwt\"\n      ]\n    },\n    {\n      \"id\": \"d98df020-2bd3-4927-9a08-70e41ab3cbf0\",\n      \"clientId\": \"security-admin-console\",\n      \"name\": \"${client_security-admin-console}\",\n      \"rootUrl\": \"${authAdminUrl}\",\n      \"baseUrl\": \"/admin/myrealm/console/\",\n      \"surrogateAuthRequired\": false,\n      \"enabled\": true,\n      \"alwaysDisplayInConsole\": false,\n      \"clientAuthenticatorType\": \"client-secret\",\n      \"secret\": \"**********\",\n      \"redirectUris\": [\n        \"/admin/myrealm/console/*\"\n      ],\n      \"webOrigins\": [\n        \"+\"\n      ],\n      \"notBefore\": 0,\n      \"bearerOnly\": false,\n      \"consentRequired\": false,\n      \"standardFlowEnabled\": true,\n      \"implicitFlowEnabled\": false,\n      \"directAccessGrantsEnabled\": false,\n      \"serviceAccountsEnabled\": false,\n      \"publicClient\": true,\n      \"frontchannelLogout\": false,\n      \"protocol\": \"openid-connect\",\n      \"attributes\": {\n        \"pkce.code.challenge.method\": \"S256\"\n      },\n      \"authenticationFlowBindingOverrides\": {},\n      \"fullScopeAllowed\": false,\n      \"nodeReRegistrationTimeout\": 0,\n      \"protocolMappers\": [\n        {\n          \"id\": \"7cea2fc4-a8b8-4f9a-a3f8-7e47a9d8e312\",\n          \"name\": \"locale\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-attribute-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"locale\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"locale\",\n            \"jsonType.label\": \"String\"\n          }\n        }\n      ],\n      \"defaultClientScopes\": [\n        \"web-origins\",\n        \"role_list\",\n        \"profile\",\n        \"roles\",\n        \"email\"\n      ],\n      \"optionalClientScopes\": [\n        \"address\",\n        \"phone\",\n        \"offline_access\",\n        \"microprofile-jwt\"\n      ]\n    }\n  ],\n  \"clientScopes\": [\n    {\n      \"id\": \"26e4ed9d-a5d7-4798-bf41-c0f95c338c83\",\n      \"name\": \"address\",\n      \"description\": \"OpenID Connect built-in scope: address\",\n      \"protocol\": \"openid-connect\",\n      \"attributes\": {\n        \"include.in.token.scope\": \"true\",\n        \"display.on.consent.screen\": \"true\",\n        \"consent.screen.text\": \"${addressScopeConsentText}\"\n      },\n      \"protocolMappers\": [\n        {\n          \"id\": \"6cb3b635-0a9a-417a-a090-2374608a48d7\",\n          \"name\": \"address\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-address-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"user.attribute.formatted\": \"formatted\",\n            \"user.attribute.country\": \"country\",\n            \"user.attribute.postal_code\": \"postal_code\",\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute.street\": \"street\",\n            \"id.token.claim\": \"true\",\n            \"user.attribute.region\": \"region\",\n            \"access.token.claim\": \"true\",\n            \"user.attribute.locality\": \"locality\"\n          }\n        }\n      ]\n    },\n    {\n      \"id\": \"51c14aa1-08a3-461b-9811-8973ab6b8a22\",\n      \"name\": \"email\",\n      \"description\": \"OpenID Connect built-in scope: email\",\n      \"protocol\": \"openid-connect\",\n      \"attributes\": {\n        \"include.in.token.scope\": \"true\",\n        \"display.on.consent.screen\": \"true\",\n        \"consent.screen.text\": \"${emailScopeConsentText}\"\n      },\n      \"protocolMappers\": [\n        {\n          \"id\": \"1b624b0a-6855-4112-a8e8-4f5b8ecfc7f3\",\n          \"name\": \"email\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-property-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"email\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"email\",\n            \"jsonType.label\": \"String\"\n          }\n        },\n        {\n          \"id\": \"6013d20a-d7fd-4f70-b200-4a57eb2334cd\",\n          \"name\": \"email verified\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-property-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"emailVerified\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"email_verified\",\n            \"jsonType.label\": \"boolean\"\n          }\n        }\n      ]\n    },\n    {\n      \"id\": \"e3381b19-584d-4698-bbe7-094e876d22ff\",\n      \"name\": \"microprofile-jwt\",\n      \"description\": \"Microprofile - JWT built-in scope\",\n      \"protocol\": \"openid-connect\",\n      \"attributes\": {\n        \"include.in.token.scope\": \"true\",\n        \"display.on.consent.screen\": \"false\"\n      },\n      \"protocolMappers\": [\n        {\n          \"id\": \"0482d32c-fb0e-4058-932e-1e126113a643\",\n          \"name\": \"groups\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-realm-role-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"multivalued\": \"true\",\n            \"user.attribute\": \"foo\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"groups\",\n            \"jsonType.label\": \"String\"\n          }\n        },\n        {\n          \"id\": \"3a3760a2-63a4-410d-880b-ed3767ad1f1e\",\n          \"name\": \"upn\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-property-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"username\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"upn\",\n            \"jsonType.label\": \"String\"\n          }\n        }\n      ]\n    },\n    {\n      \"id\": \"94aec0fe-e68e-47b9-8d6d-cfcaf397eda1\",\n      \"name\": \"offline_access\",\n      \"description\": \"OpenID Connect built-in scope: offline_access\",\n      \"protocol\": \"openid-connect\",\n      \"attributes\": {\n        \"consent.screen.text\": \"${offlineAccessScopeConsentText}\",\n        \"display.on.consent.screen\": \"true\"\n      }\n    },\n    {\n      \"id\": \"63799910-3d6c-4c3e-9045-40da3fb3dfe1\",\n      \"name\": \"phone\",\n      \"description\": \"OpenID Connect built-in scope: phone\",\n      \"protocol\": \"openid-connect\",\n      \"attributes\": {\n        \"include.in.token.scope\": \"true\",\n        \"display.on.consent.screen\": \"true\",\n        \"consent.screen.text\": \"${phoneScopeConsentText}\"\n      },\n      \"protocolMappers\": [\n        {\n          \"id\": \"abde34f2-9cb5-4d0b-8f70-e9ef36a6f77a\",\n          \"name\": \"phone number verified\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-attribute-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"phoneNumberVerified\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"phone_number_verified\",\n            \"jsonType.label\": \"boolean\"\n          }\n        },\n        {\n          \"id\": \"84d14045-17c0-47d4-a744-bbcecec3ff8b\",\n          \"name\": \"phone number\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-attribute-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"phoneNumber\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"phone_number\",\n            \"jsonType.label\": \"String\"\n          }\n        }\n      ]\n    },\n    {\n      \"id\": \"2fda1e78-7e07-43a5-9fb2-8ab3f8568de3\",\n      \"name\": \"profile\",\n      \"description\": \"OpenID Connect built-in scope: profile\",\n      \"protocol\": \"openid-connect\",\n      \"attributes\": {\n        \"include.in.token.scope\": \"true\",\n        \"display.on.consent.screen\": \"true\",\n        \"consent.screen.text\": \"${profileScopeConsentText}\"\n      },\n      \"protocolMappers\": [\n        {\n          \"id\": \"8cb87890-ede5-49b5-a6f2-c0d62b0406ef\",\n          \"name\": \"family name\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-property-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"lastName\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"family_name\",\n            \"jsonType.label\": \"String\"\n          }\n        },\n        {\n          \"id\": \"c173be50-4eba-4655-ac10-05f21f05dc45\",\n          \"name\": \"profile\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-attribute-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"profile\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"profile\",\n            \"jsonType.label\": \"String\"\n          }\n        },\n        {\n          \"id\": \"162585c1-ed4f-45a3-8157-567af4710264\",\n          \"name\": \"picture\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-attribute-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"picture\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"picture\",\n            \"jsonType.label\": \"String\"\n          }\n        },\n        {\n          \"id\": \"65a1aa14-d54e-4cf2-86cf-9b9ccfb3ed13\",\n          \"name\": \"website\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-attribute-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"website\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"website\",\n            \"jsonType.label\": \"String\"\n          }\n        },\n        {\n          \"id\": \"3ce11e03-64cc-4302-8cca-76dfecbf9db5\",\n          \"name\": \"locale\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-attribute-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"locale\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"locale\",\n            \"jsonType.label\": \"String\"\n          }\n        },\n        {\n          \"id\": \"198b1ec9-dd00-4e14-b3e9-25b3cbcb562c\",\n          \"name\": \"gender\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-attribute-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"gender\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"gender\",\n            \"jsonType.label\": \"String\"\n          }\n        },\n        {\n          \"id\": \"a25d712a-61dc-4e75-84c9-3ee7cc3e98dd\",\n          \"name\": \"zoneinfo\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-attribute-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"zoneinfo\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"zoneinfo\",\n            \"jsonType.label\": \"String\"\n          }\n        },\n        {\n          \"id\": \"eef4fa11-97bb-497a-9f57-64d8e2b5f0c4\",\n          \"name\": \"nickname\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-attribute-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"nickname\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"nickname\",\n            \"jsonType.label\": \"String\"\n          }\n        },\n        {\n          \"id\": \"0fc7220b-f98f-4dd1-aff2-20c4677dda56\",\n          \"name\": \"birthdate\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-attribute-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"birthdate\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"birthdate\",\n            \"jsonType.label\": \"String\"\n          }\n        },\n        {\n          \"id\": \"41378daf-b9aa-427f-9665-82ee9e053516\",\n          \"name\": \"username\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-property-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"username\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"preferred_username\",\n            \"jsonType.label\": \"String\"\n          }\n        },\n        {\n          \"id\": \"df15c9d5-39da-4935-beb0-0fd2bc9dab63\",\n          \"name\": \"updated at\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-attribute-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"updatedAt\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"updated_at\",\n            \"jsonType.label\": \"String\"\n          }\n        },\n        {\n          \"id\": \"fc361523-e9c0-4333-b398-687cfc200eb1\",\n          \"name\": \"middle name\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-attribute-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"middleName\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"middle_name\",\n            \"jsonType.label\": \"String\"\n          }\n        },\n        {\n          \"id\": \"a7b435e6-53ae-4ded-ad13-21b91aaccaae\",\n          \"name\": \"full name\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-full-name-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"userinfo.token.claim\": \"true\"\n          }\n        },\n        {\n          \"id\": \"7bafd2d6-8618-4b53-aece-f6fa6d935fe8\",\n          \"name\": \"given name\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-property-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"userinfo.token.claim\": \"true\",\n            \"user.attribute\": \"firstName\",\n            \"id.token.claim\": \"true\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"given_name\",\n            \"jsonType.label\": \"String\"\n          }\n        }\n      ]\n    },\n    {\n      \"id\": \"34541720-bc23-4915-857b-1ce77cbcef55\",\n      \"name\": \"role_list\",\n      \"description\": \"SAML role list\",\n      \"protocol\": \"saml\",\n      \"attributes\": {\n        \"consent.screen.text\": \"${samlRoleListScopeConsentText}\",\n        \"display.on.consent.screen\": \"true\"\n      },\n      \"protocolMappers\": [\n        {\n          \"id\": \"964e61b8-08e2-4c50-abfc-60838e205813\",\n          \"name\": \"role list\",\n          \"protocol\": \"saml\",\n          \"protocolMapper\": \"saml-role-list-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"single\": \"false\",\n            \"attribute.nameformat\": \"Basic\",\n            \"attribute.name\": \"Role\"\n          }\n        }\n      ]\n    },\n    {\n      \"id\": \"6bc76c36-7395-44ee-80c6-796696c86a2c\",\n      \"name\": \"roles\",\n      \"description\": \"OpenID Connect scope for add user roles to the access token\",\n      \"protocol\": \"openid-connect\",\n      \"attributes\": {\n        \"include.in.token.scope\": \"false\",\n        \"display.on.consent.screen\": \"true\",\n        \"consent.screen.text\": \"${rolesScopeConsentText}\"\n      },\n      \"protocolMappers\": [\n        {\n          \"id\": \"40db3c27-d5f8-46e8-960c-4c66807a0a3f\",\n          \"name\": \"realm roles\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-realm-role-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"multivalued\": \"true\",\n            \"user.attribute\": \"foo\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"realm_access.roles\",\n            \"jsonType.label\": \"String\"\n          }\n        },\n        {\n          \"id\": \"32f14c9d-b9f6-45dc-a136-2586c0322e22\",\n          \"name\": \"client roles\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-usermodel-client-role-mapper\",\n          \"consentRequired\": false,\n          \"config\": {\n            \"multivalued\": \"true\",\n            \"user.attribute\": \"foo\",\n            \"access.token.claim\": \"true\",\n            \"claim.name\": \"resource_access.${client_id}.roles\",\n            \"jsonType.label\": \"String\"\n          }\n        },\n        {\n          \"id\": \"ed6980c0-f965-4575-8525-fa4a55118b33\",\n          \"name\": \"audience resolve\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-audience-resolve-mapper\",\n          \"consentRequired\": false,\n          \"config\": {}\n        }\n      ]\n    },\n    {\n      \"id\": \"cc6a049e-c90f-40ad-8e04-2364209d5955\",\n      \"name\": \"web-origins\",\n      \"description\": \"OpenID Connect scope for add allowed web origins to the access token\",\n      \"protocol\": \"openid-connect\",\n      \"attributes\": {\n        \"include.in.token.scope\": \"false\",\n        \"display.on.consent.screen\": \"false\",\n        \"consent.screen.text\": \"\"\n      },\n      \"protocolMappers\": [\n        {\n          \"id\": \"0edd6fd4-aa62-40c8-a035-d1636221530f\",\n          \"name\": \"allowed web origins\",\n          \"protocol\": \"openid-connect\",\n          \"protocolMapper\": \"oidc-allowed-origins-mapper\",\n          \"consentRequired\": false,\n          \"config\": {}\n        }\n      ]\n    }\n  ],\n  \"defaultDefaultClientScopes\": [\n    \"profile\",\n    \"role_list\",\n    \"email\",\n    \"roles\",\n    \"web-origins\"\n  ],\n  \"defaultOptionalClientScopes\": [\n    \"address\",\n    \"phone\",\n    \"offline_access\",\n    \"microprofile-jwt\"\n  ],\n  \"browserSecurityHeaders\": {\n    \"contentSecurityPolicyReportOnly\": \"\",\n    \"xContentTypeOptions\": \"nosniff\",\n    \"xRobotsTag\": \"none\",\n    \"xFrameOptions\": \"SAMEORIGIN\",\n    \"contentSecurityPolicy\": \"frame-src 'self'; frame-ancestors 'self'; object-src 'none';\",\n    \"xXSSProtection\": \"1; mode=block\",\n    \"strictTransportSecurity\": \"max-age=31536000; includeSubDomains\"\n  },\n  \"smtpServer\": {},\n  \"eventsEnabled\": true,\n  \"eventsListeners\": [\n    \"jboss-logging\"\n  ],\n  \"enabledEventTypes\": [\n    \"SEND_RESET_PASSWORD\",\n    \"UPDATE_CONSENT_ERROR\",\n    \"GRANT_CONSENT\",\n    \"REMOVE_TOTP\",\n    \"REVOKE_GRANT\",\n    \"UPDATE_TOTP\",\n    \"LOGIN_ERROR\",\n    \"CLIENT_LOGIN\",\n    \"RESET_PASSWORD_ERROR\",\n    \"IMPERSONATE_ERROR\",\n    \"CODE_TO_TOKEN_ERROR\",\n    \"CUSTOM_REQUIRED_ACTION\",\n    \"RESTART_AUTHENTICATION\",\n    \"IMPERSONATE\",\n    \"UPDATE_PROFILE_ERROR\",\n    \"LOGIN\",\n    \"UPDATE_PASSWORD_ERROR\",\n    \"CLIENT_INITIATED_ACCOUNT_LINKING\",\n    \"TOKEN_EXCHANGE\",\n    \"LOGOUT\",\n    \"REGISTER\",\n    \"DELETE_ACCOUNT_ERROR\",\n    \"CLIENT_REGISTER\",\n    \"IDENTITY_PROVIDER_LINK_ACCOUNT\",\n    \"DELETE_ACCOUNT\",\n    \"UPDATE_PASSWORD\",\n    \"CLIENT_DELETE\",\n    \"FEDERATED_IDENTITY_LINK_ERROR\",\n    \"IDENTITY_PROVIDER_FIRST_LOGIN\",\n    \"CLIENT_DELETE_ERROR\",\n    \"VERIFY_EMAIL\",\n    \"CLIENT_LOGIN_ERROR\",\n    \"RESTART_AUTHENTICATION_ERROR\",\n    \"EXECUTE_ACTIONS\",\n    \"REMOVE_FEDERATED_IDENTITY_ERROR\",\n    \"TOKEN_EXCHANGE_ERROR\",\n    \"PERMISSION_TOKEN\",\n    \"SEND_IDENTITY_PROVIDER_LINK_ERROR\",\n    \"EXECUTE_ACTION_TOKEN_ERROR\",\n    \"SEND_VERIFY_EMAIL\",\n    \"EXECUTE_ACTIONS_ERROR\",\n    \"REMOVE_FEDERATED_IDENTITY\",\n    \"IDENTITY_PROVIDER_POST_LOGIN\",\n    \"IDENTITY_PROVIDER_LINK_ACCOUNT_ERROR\",\n    \"UPDATE_EMAIL\",\n    \"REGISTER_ERROR\",\n    \"REVOKE_GRANT_ERROR\",\n    \"EXECUTE_ACTION_TOKEN\",\n    \"LOGOUT_ERROR\",\n    \"UPDATE_EMAIL_ERROR\",\n    \"CLIENT_UPDATE_ERROR\",\n    \"UPDATE_PROFILE\",\n    \"CLIENT_REGISTER_ERROR\",\n    \"FEDERATED_IDENTITY_LINK\",\n    \"SEND_IDENTITY_PROVIDER_LINK\",\n    \"SEND_VERIFY_EMAIL_ERROR\",\n    \"RESET_PASSWORD\",\n    \"CLIENT_INITIATED_ACCOUNT_LINKING_ERROR\",\n    \"UPDATE_CONSENT\",\n    \"REMOVE_TOTP_ERROR\",\n    \"VERIFY_EMAIL_ERROR\",\n    \"SEND_RESET_PASSWORD_ERROR\",\n    \"CLIENT_UPDATE\",\n    \"CUSTOM_REQUIRED_ACTION_ERROR\",\n    \"IDENTITY_PROVIDER_POST_LOGIN_ERROR\",\n    \"UPDATE_TOTP_ERROR\",\n    \"CODE_TO_TOKEN\",\n    \"GRANT_CONSENT_ERROR\",\n    \"IDENTITY_PROVIDER_FIRST_LOGIN_ERROR\"\n  ],\n  \"adminEventsEnabled\": true,\n  \"adminEventsDetailsEnabled\": true,\n  \"identityProviders\": [],\n  \"identityProviderMappers\": [],\n  \"components\": {\n    \"org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy\": [\n      {\n        \"id\": \"40f72984-7551-44ad-9772-0971a99d133c\",\n        \"name\": \"Full Scope Disabled\",\n        \"providerId\": \"scope\",\n        \"subType\": \"anonymous\",\n        \"subComponents\": {},\n        \"config\": {}\n      },\n      {\n        \"id\": \"d5462f4f-8dd6-43cf-a923-1a75fc16c744\",\n        \"name\": \"Allowed Client Scopes\",\n        \"providerId\": \"allowed-client-templates\",\n        \"subType\": \"anonymous\",\n        \"subComponents\": {},\n        \"config\": {\n          \"allow-default-scopes\": [\n            \"true\"\n          ]\n        }\n      },\n      {\n        \"id\": \"34c36865-4e24-47d6-81e4-0249a7be541e\",\n        \"name\": \"Allowed Client Scopes\",\n        \"providerId\": \"allowed-client-templates\",\n        \"subType\": \"authenticated\",\n        \"subComponents\": {},\n        \"config\": {\n          \"allow-default-scopes\": [\n            \"true\"\n          ]\n        }\n      },\n      {\n        \"id\": \"d1ede293-cf9a-4bac-8cda-42446d858c41\",\n        \"name\": \"Allowed Protocol Mapper Types\",\n        \"providerId\": \"allowed-protocol-mappers\",\n        \"subType\": \"authenticated\",\n        \"subComponents\": {},\n        \"config\": {\n          \"allowed-protocol-mapper-types\": [\n            \"oidc-full-name-mapper\",\n            \"saml-role-list-mapper\",\n            \"saml-user-attribute-mapper\",\n            \"oidc-usermodel-property-mapper\",\n            \"saml-user-property-mapper\",\n            \"oidc-sha256-pairwise-sub-mapper\",\n            \"oidc-usermodel-attribute-mapper\",\n            \"oidc-address-mapper\"\n          ]\n        }\n      },\n      {\n        \"id\": \"23f99b5d-6654-49c7-8491-5d889fbbf4f2\",\n        \"name\": \"Consent Required\",\n        \"providerId\": \"consent-required\",\n        \"subType\": \"anonymous\",\n        \"subComponents\": {},\n        \"config\": {}\n      },\n      {\n        \"id\": \"d5a65117-944b-4afe-ac3a-e6508ec29c6a\",\n        \"name\": \"Max Clients Limit\",\n        \"providerId\": \"max-clients\",\n        \"subType\": \"anonymous\",\n        \"subComponents\": {},\n        \"config\": {\n          \"max-clients\": [\n            \"200\"\n          ]\n        }\n      },\n      {\n        \"id\": \"8a9d883a-a686-472a-86a2-49b1a7b1c81e\",\n        \"name\": \"Allowed Protocol Mapper Types\",\n        \"providerId\": \"allowed-protocol-mappers\",\n        \"subType\": \"anonymous\",\n        \"subComponents\": {},\n        \"config\": {\n          \"allowed-protocol-mapper-types\": [\n            \"oidc-usermodel-property-mapper\",\n            \"oidc-sha256-pairwise-sub-mapper\",\n            \"oidc-usermodel-attribute-mapper\",\n            \"oidc-address-mapper\",\n            \"saml-user-property-mapper\",\n            \"saml-role-list-mapper\",\n            \"oidc-full-name-mapper\",\n            \"saml-user-attribute-mapper\"\n          ]\n        }\n      },\n      {\n        \"id\": \"abaf5ae0-3e90-4cfa-9e7d-0ac1377eb780\",\n        \"name\": \"Trusted Hosts\",\n        \"providerId\": \"trusted-hosts\",\n        \"subType\": \"anonymous\",\n        \"subComponents\": {},\n        \"config\": {\n          \"host-sending-registration-request-must-match\": [\n            \"true\"\n          ],\n          \"client-uris-must-match\": [\n            \"true\"\n          ]\n        }\n      }\n    ],\n    \"org.keycloak.keys.KeyProvider\": [\n      {\n        \"id\": \"1cc0eece-6c1b-4215-b154-f0ac742eca4d\",\n        \"name\": \"rsa-generated\",\n        \"providerId\": \"rsa-generated\",\n        \"subComponents\": {},\n        \"config\": {\n          \"priority\": [\n            \"100\"\n          ]\n        }\n      },\n      {\n        \"id\": \"6552a2b8-736b-4e72-a1e6-4e965580d2e7\",\n        \"name\": \"hmac-generated\",\n        \"providerId\": \"hmac-generated\",\n        \"subComponents\": {},\n        \"config\": {\n          \"priority\": [\n            \"100\"\n          ],\n          \"algorithm\": [\n            \"HS256\"\n          ]\n        }\n      },\n      {\n        \"id\": \"0e400a21-1fe8-438b-b75e-8e085664a1a5\",\n        \"name\": \"aes-generated\",\n        \"providerId\": \"aes-generated\",\n        \"subComponents\": {},\n        \"config\": {\n          \"priority\": [\n            \"100\"\n          ]\n        }\n      }\n    ]\n  },\n  \"internationalizationEnabled\": false,\n  \"supportedLocales\": [],\n  \"authenticationFlows\": [\n    {\n      \"id\": \"6be3bb93-c933-4772-81a0-a34f26adf896\",\n      \"alias\": \"Account verification options\",\n      \"description\": \"Method with which to verity the existing account\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": false,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"idp-email-verification\",\n          \"requirement\": \"ALTERNATIVE\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"requirement\": \"ALTERNATIVE\",\n          \"priority\": 20,\n          \"flowAlias\": \"Verify Existing Account by Re-authentication\",\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": true\n        }\n      ]\n    },\n    {\n      \"id\": \"9a78aab6-abde-4649-937c-a8471980a812\",\n      \"alias\": \"Authentication Options\",\n      \"description\": \"Authentication options.\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": false,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"basic-auth\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"basic-auth-otp\",\n          \"requirement\": \"DISABLED\",\n          \"priority\": 20,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"auth-spnego\",\n          \"requirement\": \"DISABLED\",\n          \"priority\": 30,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        }\n      ]\n    },\n    {\n      \"id\": \"90250949-9873-4cc9-a584-4d714be9ceb6\",\n      \"alias\": \"Browser - Conditional OTP\",\n      \"description\": \"Flow to determine if the OTP is required for the authentication\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": false,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"conditional-user-configured\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"auth-otp-form\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 20,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        }\n      ]\n    },\n    {\n      \"id\": \"499dad8e-bd3d-469d-ab20-2ca3ecfbb752\",\n      \"alias\": \"Direct Grant - Conditional OTP\",\n      \"description\": \"Flow to determine if the OTP is required for the authentication\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": false,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"conditional-user-configured\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"direct-grant-validate-otp\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 20,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        }\n      ]\n    },\n    {\n      \"id\": \"85081aaa-83f5-452b-b1e5-62ade54e2544\",\n      \"alias\": \"First broker login - Conditional OTP\",\n      \"description\": \"Flow to determine if the OTP is required for the authentication\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": false,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"conditional-user-configured\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"auth-otp-form\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 20,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        }\n      ]\n    },\n    {\n      \"id\": \"21e0a532-6987-4385-966c-35a61c8076ba\",\n      \"alias\": \"Handle Existing Account\",\n      \"description\": \"Handle what to do if there is existing account with same email/username like authenticated identity provider\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": false,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"idp-confirm-link\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 20,\n          \"flowAlias\": \"Account verification options\",\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": true\n        }\n      ]\n    },\n    {\n      \"id\": \"7b24989f-5533-4512-a47b-bad174f6e802\",\n      \"alias\": \"Reset - Conditional OTP\",\n      \"description\": \"Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": false,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"conditional-user-configured\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"reset-otp\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 20,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        }\n      ]\n    },\n    {\n      \"id\": \"a2093830-6b2d-476f-ad9e-fd407a0a3b67\",\n      \"alias\": \"User creation or linking\",\n      \"description\": \"Flow for the existing/non-existing user alternatives\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": false,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticatorConfig\": \"create unique user config\",\n          \"authenticator\": \"idp-create-user-if-unique\",\n          \"requirement\": \"ALTERNATIVE\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"requirement\": \"ALTERNATIVE\",\n          \"priority\": 20,\n          \"flowAlias\": \"Handle Existing Account\",\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": true\n        }\n      ]\n    },\n    {\n      \"id\": \"522b343c-865f-4829-b40b-3d9993362a68\",\n      \"alias\": \"Verify Existing Account by Re-authentication\",\n      \"description\": \"Reauthentication of existing account\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": false,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"idp-username-password-form\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"requirement\": \"CONDITIONAL\",\n          \"priority\": 20,\n          \"flowAlias\": \"First broker login - Conditional OTP\",\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": true\n        }\n      ]\n    },\n    {\n      \"id\": \"9d9f4041-a29a-43bd-930b-8b4d6b7694cd\",\n      \"alias\": \"browser\",\n      \"description\": \"browser based authentication\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": true,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"auth-cookie\",\n          \"requirement\": \"ALTERNATIVE\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"auth-spnego\",\n          \"requirement\": \"DISABLED\",\n          \"priority\": 20,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"identity-provider-redirector\",\n          \"requirement\": \"ALTERNATIVE\",\n          \"priority\": 25,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"requirement\": \"ALTERNATIVE\",\n          \"priority\": 30,\n          \"flowAlias\": \"forms\",\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": true\n        }\n      ]\n    },\n    {\n      \"id\": \"e88f13ee-d517-47c8-811d-c7245eccba14\",\n      \"alias\": \"clients\",\n      \"description\": \"Base authentication for clients\",\n      \"providerId\": \"client-flow\",\n      \"topLevel\": true,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"client-secret\",\n          \"requirement\": \"ALTERNATIVE\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"client-jwt\",\n          \"requirement\": \"ALTERNATIVE\",\n          \"priority\": 20,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"client-secret-jwt\",\n          \"requirement\": \"ALTERNATIVE\",\n          \"priority\": 30,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"client-x509\",\n          \"requirement\": \"ALTERNATIVE\",\n          \"priority\": 40,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        }\n      ]\n    },\n    {\n      \"id\": \"3d357ff8-ca09-49f3-b5d6-e77a79b4e87a\",\n      \"alias\": \"direct grant\",\n      \"description\": \"OpenID Connect Resource Owner Grant\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": true,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"direct-grant-validate-username\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"direct-grant-validate-password\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 20,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"requirement\": \"CONDITIONAL\",\n          \"priority\": 30,\n          \"flowAlias\": \"Direct Grant - Conditional OTP\",\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": true\n        }\n      ]\n    },\n    {\n      \"id\": \"f5411f27-19e9-4e96-b1cb-851642253d56\",\n      \"alias\": \"docker auth\",\n      \"description\": \"Used by Docker clients to authenticate against the IDP\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": true,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"docker-http-basic-authenticator\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        }\n      ]\n    },\n    {\n      \"id\": \"7a19ddb0-2c59-4414-b5e7-a34ed53b0430\",\n      \"alias\": \"first broker login\",\n      \"description\": \"Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": true,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticatorConfig\": \"review profile config\",\n          \"authenticator\": \"idp-review-profile\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 20,\n          \"flowAlias\": \"User creation or linking\",\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": true\n        }\n      ]\n    },\n    {\n      \"id\": \"f5df97cb-dce6-45be-a929-e33cfd366aaf\",\n      \"alias\": \"forms\",\n      \"description\": \"Username, password, otp and other auth forms.\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": false,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"auth-username-password-form\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"requirement\": \"CONDITIONAL\",\n          \"priority\": 20,\n          \"flowAlias\": \"Browser - Conditional OTP\",\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": true\n        }\n      ]\n    },\n    {\n      \"id\": \"adc33104-6d59-4505-ad53-acfd28b57e05\",\n      \"alias\": \"http challenge\",\n      \"description\": \"An authentication flow based on challenge-response HTTP Authentication Schemes\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": true,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"no-cookie-redirect\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 20,\n          \"flowAlias\": \"Authentication Options\",\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": true\n        }\n      ]\n    },\n    {\n      \"id\": \"a51e576c-17bd-4f2c-96b9-c3f8ffbbc062\",\n      \"alias\": \"registration\",\n      \"description\": \"registration flow\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": true,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"registration-page-form\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 10,\n          \"flowAlias\": \"registration form\",\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": true\n        }\n      ]\n    },\n    {\n      \"id\": \"ce94e317-b3ca-40e6-9e2a-854965ba10e6\",\n      \"alias\": \"registration form\",\n      \"description\": \"registration form\",\n      \"providerId\": \"form-flow\",\n      \"topLevel\": false,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"registration-user-creation\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 20,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"registration-profile-action\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 40,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"registration-password-action\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 50,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"registration-recaptcha-action\",\n          \"requirement\": \"DISABLED\",\n          \"priority\": 60,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        }\n      ]\n    },\n    {\n      \"id\": \"c3076d31-64a3-4da4-accf-c775b756a957\",\n      \"alias\": \"reset credentials\",\n      \"description\": \"Reset credentials for a user if they forgot their password or something\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": true,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"reset-credentials-choose-user\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"reset-credential-email\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 20,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"authenticator\": \"reset-password\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 30,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        },\n        {\n          \"requirement\": \"CONDITIONAL\",\n          \"priority\": 40,\n          \"flowAlias\": \"Reset - Conditional OTP\",\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": true\n        }\n      ]\n    },\n    {\n      \"id\": \"ad72c3c5-32c7-4c06-b3b3-56608803043d\",\n      \"alias\": \"saml ecp\",\n      \"description\": \"SAML ECP Profile Authentication Flow\",\n      \"providerId\": \"basic-flow\",\n      \"topLevel\": true,\n      \"builtIn\": true,\n      \"authenticationExecutions\": [\n        {\n          \"authenticator\": \"http-basic-authenticator\",\n          \"requirement\": \"REQUIRED\",\n          \"priority\": 10,\n          \"userSetupAllowed\": false,\n          \"autheticatorFlow\": false\n        }\n      ]\n    }\n  ],\n  \"authenticatorConfig\": [\n    {\n      \"id\": \"463c92db-386d-4068-b61f-ebbd6c589366\",\n      \"alias\": \"create unique user config\",\n      \"config\": {\n        \"require.password.update.after.registration\": \"false\"\n      }\n    },\n    {\n      \"id\": \"0b2817f6-7103-43bf-aa95-54f5d436c273\",\n      \"alias\": \"review profile config\",\n      \"config\": {\n        \"update.profile.on.first.login\": \"missing\"\n      }\n    }\n  ],\n  \"requiredActions\": [\n    {\n      \"alias\": \"CONFIGURE_TOTP\",\n      \"name\": \"Configure OTP\",\n      \"providerId\": \"CONFIGURE_TOTP\",\n      \"enabled\": true,\n      \"defaultAction\": false,\n      \"priority\": 10,\n      \"config\": {}\n    },\n    {\n      \"alias\": \"terms_and_conditions\",\n      \"name\": \"Terms and Conditions\",\n      \"providerId\": \"terms_and_conditions\",\n      \"enabled\": false,\n      \"defaultAction\": false,\n      \"priority\": 20,\n      \"config\": {}\n    },\n    {\n      \"alias\": \"UPDATE_PASSWORD\",\n      \"name\": \"Update Password\",\n      \"providerId\": \"UPDATE_PASSWORD\",\n      \"enabled\": true,\n      \"defaultAction\": false,\n      \"priority\": 30,\n      \"config\": {}\n    },\n    {\n      \"alias\": \"UPDATE_PROFILE\",\n      \"name\": \"Update Profile\",\n      \"providerId\": \"UPDATE_PROFILE\",\n      \"enabled\": true,\n      \"defaultAction\": false,\n      \"priority\": 40,\n      \"config\": {}\n    },\n    {\n      \"alias\": \"VERIFY_EMAIL\",\n      \"name\": \"Verify Email\",\n      \"providerId\": \"VERIFY_EMAIL\",\n      \"enabled\": true,\n      \"defaultAction\": false,\n      \"priority\": 50,\n      \"config\": {}\n    },\n    {\n      \"alias\": \"delete_account\",\n      \"name\": \"Delete Account\",\n      \"providerId\": \"delete_account\",\n      \"enabled\": false,\n      \"defaultAction\": false,\n      \"priority\": 60,\n      \"config\": {}\n    },\n    {\n      \"alias\": \"update_user_locale\",\n      \"name\": \"Update User Locale\",\n      \"providerId\": \"update_user_locale\",\n      \"enabled\": true,\n      \"defaultAction\": false,\n      \"priority\": 1000,\n      \"config\": {}\n    }\n  ],\n  \"browserFlow\": \"browser\",\n  \"registrationFlow\": \"registration\",\n  \"directGrantFlow\": \"direct grant\",\n  \"resetCredentialsFlow\": \"reset credentials\",\n  \"clientAuthenticationFlow\": \"clients\",\n  \"dockerAuthenticationFlow\": \"docker auth\",\n  \"attributes\": {\n    \"clientOfflineSessionMaxLifespan\": \"0\",\n    \"clientSessionIdleTimeout\": \"0\",\n    \"clientSessionMaxLifespan\": \"0\",\n    \"clientOfflineSessionIdleTimeout\": \"0\"\n  },\n  \"keycloakVersion\": \"12.0.1\",\n  \"userManagedAccessAllowed\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://192.168.49.2:31320/auth/admin/realms/",
							"protocol": "http",
							"host": [
								"192",
								"168",
								"49",
								"2"
							],
							"port": "31320",
							"path": [
								"auth",
								"admin",
								"realms",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ingress",
			"item": [
				{
					"name": "reset all Copy",
					"item": [
						{
							"name": "reset tours",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours/reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours",
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "reset users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "reset orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders/reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "reset payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/payments/reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments",
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "reset flights bookings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/flights/reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"flights",
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "reset hotels bookings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hotelsBookings/reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hotelsBookings",
										"reset"
									]
								}
							},
							"response": []
						},
						{
							"name": "reset successful orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/successfulOrders/reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"successfulOrders",
										"reset"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "users management Copy",
					"item": [
						{
							"name": "create admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"adminId\", jsonData.userId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Vasya\",\n    \"role\": \"ADMIN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "create customer 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"customerId1\", jsonData.userId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Alex\",\n    \"role\": \"CUSTOMER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "create customer 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"customerId2\", jsonData.userId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Ivan\",\n    \"role\": \"CUSTOMER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "check 3 users created with proper roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check 3 users created\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.length).to.eql(3);",
											"",
											"    var expectedUser1 = {",
											"        \"userId\": pm.globals.get(\"adminId\"),",
											"        \"name\": \"Vasya\",",
											"        \"role\": \"ADMIN\"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(expectedUser1);",
											"",
											"    var expectedUser2 = {",
											"        \"userId\": pm.globals.get(\"customerId1\"),",
											"        \"name\": \"Alex\",",
											"        \"role\": \"CUSTOMER\"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(expectedUser2);",
											"",
											"    var expectedUser3 = {",
											"        \"userId\": pm.globals.get(\"customerId2\"),",
											"        \"name\": \"Ivan\",",
											"        \"role\": \"CUSTOMER\"",
											"    };",
											"    pm.expect(pm.response.json()).to.deep.include(expectedUser3);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 4000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "tours service tests Copy",
					"item": [
						{
							"name": "check no tours yet Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check no tours yet\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours"
									]
								}
							},
							"response": []
						},
						{
							"name": "try to create tour not authorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is UNAUTHORIZED\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Request-User",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Mountains view\",\r\n    \"description\": \"You will be skiing in most beautiful mountans in Europe\",\r\n    \"price\": 7000,\r\n    \"fromDate\": \"2021-07-15\",\r\n    \"toDate\": \"2021-07-22\",\r\n    \"fromDestination\": \"Moscow\",\r\n    \"toDestination\": \"Innsbruck\",\r\n    \"hotelId\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours"
									]
								}
							},
							"response": []
						},
						{
							"name": "try to create tour not admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is FORBIDDEN\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Request-User",
										"value": "{{customerId1}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Mountains view\",\r\n    \"description\": \"You will be skiing in most beautiful mountans in Europe\",\r\n    \"price\": 7000,\r\n    \"fromDate\": \"2021-07-15\",\r\n    \"toDate\": \"2021-07-22\",\r\n    \"fromDestination\": \"Moscow\",\r\n    \"toDestination\": \"Innsbruck\",\r\n    \"hotelId\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours"
									]
								}
							},
							"response": []
						},
						{
							"name": "create tour 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"tourId1\", jsonData.tourId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Request-User",
										"value": "{{adminId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Mountains view\",\r\n    \"description\": \"You will be skiing in most beautiful mountans in Europe\",\r\n    \"price\": 7000,\r\n    \"fromDate\": \"2021-07-15\",\r\n    \"toDate\": \"2021-07-22\",\r\n    \"fromDestination\": \"Moscow\",\r\n    \"toDestination\": \"Innsbruck\",\r\n    \"hotelId\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours"
									]
								}
							},
							"response": []
						},
						{
							"name": "check tour 1 created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check tour1 created\", function () {",
											"",
											"    var expectedTour = {",
											"        \"tourId\": pm.globals.get(\"tourId1\"),",
											"        \"name\": \"Mountains view\",",
											"        \"description\": \"You will be skiing in most beautiful mountans in Europe\",",
											"        \"price\": 7000,",
											"        \"fromDate\": \"2021-07-15T00:00:00Z\",",
											"        \"toDate\": \"2021-07-22T00:00:00Z\",",
											"        \"fromDestination\": \"Moscow\",",
											"        \"toDestination\": \"Innsbruck\",",
											"        \"hotelId\": 5",
											"    };",
											"",
											"    pm.expect(pm.response.json()).to.deep.include(expectedTour);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 4000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours/{{tourId1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours",
										"{{tourId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update tour 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Auth-Request-User",
										"value": "{{adminId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Mountains view\",\r\n    \"description\": \"You will be skiing in most beautiful mountans in Europe\",\r\n    \"price\": 3500,\r\n    \"fromDate\": \"2021-07-15\",\r\n    \"toDate\": \"2021-07-22\",\r\n    \"fromDestination\": \"Moscow\",\r\n    \"toDestination\": \"Murmansk\",\r\n    \"hotelId\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours/{{tourId1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours",
										"{{tourId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check tour 1 updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check tour1 created\", function () {",
											"",
											"    var expectedTour = {",
											"        \"tourId\": pm.globals.get(\"tourId1\"),",
											"        \"name\": \"Mountains view\",",
											"        \"description\": \"You will be skiing in most beautiful mountans in Europe\",",
											"        \"price\": 3500,",
											"        \"fromDate\": \"2021-07-15T00:00:00Z\",",
											"        \"toDate\": \"2021-07-22T00:00:00Z\",",
											"        \"fromDestination\": \"Moscow\",",
											"        \"toDestination\": \"Murmansk\",",
											"        \"hotelId\": 5",
											"    };",
											"    ",
											"    pm.expect(pm.response.json()).to.deep.include(expectedTour);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours/{{tourId1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours",
										"{{tourId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create tour 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"tourId2\", jsonData.tourId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Request-User",
										"value": "{{adminId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"North Yachting\",\r\n    \"description\": \"You will be yachting in most beautiful fjords in Europe\",\r\n    \"price\": 4999,\r\n    \"fromDate\": \"2021-09-10\",\r\n    \"toDate\": \"2021-09-17\",\r\n    \"fromDestination\": \"Saint Petersburg\",\r\n    \"toDestination\": \"Oslo\",\r\n    \"hotelId\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours"
									]
								}
							},
							"response": []
						},
						{
							"name": "check tour 2 created",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check tour 2 created\", function () {",
											"",
											"    var expectedTour = {",
											"        \"tourId\": pm.globals.get(\"tourId2\"),",
											"        \"name\": \"North Yachting\",",
											"        \"description\": \"You will be yachting in most beautiful fjords in Europe\",",
											"        \"price\": 4999,",
											"        \"fromDate\": \"2021-09-10T00:00:00Z\",",
											"        \"toDate\": \"2021-09-17T00:00:00Z\",",
											"        \"fromDestination\": \"Saint Petersburg\",",
											"        \"toDestination\": \"Oslo\",",
											"        \"hotelId\": 5",
											"    };",
											"",
											"    pm.expect(pm.response.json()).to.deep.include(expectedTour);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours/{{tourId2}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours",
										"{{tourId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create tour 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"tourId3\", jsonData.tourId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Request-User",
										"value": "{{adminId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Mountains view\",\r\n    \"description\": \"You will be skiing in most beautiful mountans in Europe\",\r\n    \"price\": 3500,\r\n    \"fromDate\": \"2021-07-15\",\r\n    \"toDate\": \"2021-07-22\",\r\n    \"fromDestination\": \"Moscow\",\r\n    \"toDestination\": \"Pskov\",\r\n    \"hotelId\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours"
									]
								}
							},
							"response": []
						},
						{
							"name": "check 3 tours exist already",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check 3 tours exist already\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete tour 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Auth-Request-User",
										"value": "{{adminId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours/{{tourId3}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours",
										"{{tourId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check only 2 tours left",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check 2 tours left\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    var expectedTour1 = {",
											"        \"tourId\": pm.globals.get(\"tourId1\"),",
											"        \"name\": \"Mountains view\",",
											"        \"description\": \"You will be skiing in most beautiful mountans in Europe\",",
											"        \"price\": 3500,",
											"        \"fromDate\": \"2021-07-15T00:00:00Z\",",
											"        \"toDate\": \"2021-07-22T00:00:00Z\",",
											"        \"fromDestination\": \"Moscow\",",
											"        \"toDestination\": \"Murmansk\",",
											"        \"hotelId\": 5",
											"    };",
											"",
											"    pm.expect(pm.response.json()).to.deep.include(expectedTour1);",
											"",
											"    var expectedTour2 = {",
											"        \"tourId\": pm.globals.get(\"tourId2\"),",
											"        \"name\": \"North Yachting\",",
											"        \"description\": \"You will be yachting in most beautiful fjords in Europe\",",
											"        \"price\": 4999,",
											"        \"fromDate\": \"2021-09-10T00:00:00Z\",",
											"        \"toDate\": \"2021-09-17T00:00:00Z\",",
											"        \"fromDestination\": \"Saint Petersburg\",",
											"        \"toDestination\": \"Oslo\",",
											"        \"hotelId\": 5",
											"    };",
											"",
											"    pm.expect(pm.response.json()).to.deep.include(expectedTour2);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": 15,\r\n    \"itemId\": 41,\r\n    \"price\": 3500,\r\n    \"deliveryDate\": \"2021-05-15\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours"
									]
								}
							},
							"response": []
						},
						{
							"name": "create tour 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"tourId4\", jsonData.tourId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Request-User",
										"value": "{{adminId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Mountains view\",\r\n    \"description\": \"You will be skiing in most beautiful mountains in Europe\",\r\n    \"price\": 6500,\r\n    \"fromDate\": \"2021-07-15\",\r\n    \"toDate\": \"2021-07-22\",\r\n    \"fromDestination\": \"Moscow\",\r\n    \"toDestination\": \"Zurich\",\r\n    \"hotelId\": 15\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours"
									]
								}
							},
							"response": []
						},
						{
							"name": "create tour 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"tourId5\", jsonData.tourId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Request-User",
										"value": "{{adminId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"City walk\",\r\n    \"description\": \"You will be staying in most beautiful district in Europe\",\r\n    \"price\": 5,\r\n    \"fromDate\": \"2021-07-15\",\r\n    \"toDate\": \"2021-07-16\",\r\n    \"fromDestination\": \"Saint Petersburg\",\r\n    \"toDestination\": \"Kupchino\",\r\n    \"hotelId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours"
									]
								}
							},
							"response": []
						},
						{
							"name": "check tours filtered and sorted properly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check 2 tours returned sorted and filtering applied\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.length).to.eql(2);",
											"    var expectedTour1 = {",
											"        \"tourId\": pm.globals.get(\"tourId5\"),",
											"        \"name\": \"City walk\",",
											"        \"description\": \"You will be staying in most beautiful district in Europe\",",
											"        \"price\": 5,",
											"        \"fromDate\": \"2021-07-15T00:00:00Z\",",
											"        \"toDate\": \"2021-07-16T00:00:00Z\",",
											"        \"fromDestination\": \"Saint Petersburg\",",
											"        \"toDestination\": \"Kupchino\",",
											"        \"hotelId\": 1",
											"    };",
											"",
											"    pm.expect(pm.response.json()[0]).to.deep.include(expectedTour1);",
											"",
											"    var expectedTour2 = {",
											"        \"tourId\": pm.globals.get(\"tourId2\"),",
											"        \"name\": \"North Yachting\",",
											"        \"description\": \"You will be yachting in most beautiful fjords in Europe\",",
											"        \"price\": 4999,",
											"        \"fromDate\": \"2021-09-10T00:00:00Z\",",
											"        \"toDate\": \"2021-09-17T00:00:00Z\",",
											"        \"fromDestination\": \"Saint Petersburg\",",
											"        \"toDestination\": \"Oslo\",",
											"        \"hotelId\": 5",
											"    };",
											"",
											"    pm.expect(pm.response.json()[1]).to.deep.include(expectedTour2);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 4000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/tours/SearchFilter?orderField=price&fromDestination=Saint%20Petersburg",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tours",
										"SearchFilter"
									],
									"query": [
										{
											"key": "orderField",
											"value": "price"
										},
										{
											"key": "fromDestination",
											"value": "Saint%20Petersburg"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "orders service tests Copy",
					"item": [
						{
							"name": "get all orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Order 1 -- try to buy tour all good",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"orderId1\", jsonData.orderId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Request-User",
										"value": "{{customerId1}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tourId\": {{tourId1}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "check order 1 completely approved",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check order 1 completely approved\", function () {",
											"",
											"    var expectedOrder = {",
											"        \"orderId\": parseInt(pm.globals.get(\"orderId1\")),",
											"        \"tourId\": parseInt(pm.globals.get(\"tourId1\")),",
											"        \"userId\": parseInt(pm.globals.get(\"customerId1\")),",
											"        \"paymentStatus\": \"APPROVED\",",
											"        \"flightBookingStatus\": \"APPROVED\",",
											"        \"hotelBookingStatus\": \"APPROVED\",",
											"        \"overallStatus\": \"APPROVED\"",
											"    };",
											"",
											"    pm.expect(pm.response.json()).to.deep.include(expectedOrder);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 4000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Order 1 -- try to do same order again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is Conflict\", function () {",
											"    pm.response.to.have.status(409);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Request-User",
										"type": "text",
										"value": "{{customerId1}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tourId\": {{tourId1}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Order 2 -- try to buy tour too expensive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"orderId2\", jsonData.orderId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Request-User",
										"value": "{{customerId1}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tourId\": {{tourId4}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "check order 2 rejected because payment rejected",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check order 2 payment rejected\", function () {",
											"",
											"    var expectedOrder = {",
											"        \"orderId\": parseInt(pm.globals.get(\"orderId2\")),",
											"        \"tourId\": parseInt(pm.globals.get(\"tourId4\")),",
											"        \"userId\": parseInt(pm.globals.get(\"customerId1\")),",
											"        \"paymentStatus\": \"REJECTED\",",
											"        \"flightBookingStatus\": \"APPROVED\",",
											"        \"hotelBookingStatus\": \"APPROVED\",",
											"        \"overallStatus\": \"REJECTED\"",
											"    };",
											"",
											"    pm.expect(pm.response.json()).to.deep.include(expectedOrder);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 4000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "check order 2 flight booking rolled back",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check flight booking rolled back\", function () {",
											"",
											"    var expectedBooking =     {",
											"        \"flightId\": parseInt(pm.globals.get(\"orderId2\")) - 3,",
											"        \"orderId\": parseInt(pm.globals.get(\"orderId2\")),",
											"        \"fromDestination\": \"Moscow\",",
											"        \"toDestination\": \"Zurich\",",
											"        \"flightStatus\": \"ROLLED_BACK\"",
											"    };",
											"",
											"    pm.expect(pm.response.json()).to.deep.include(expectedBooking);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/flights",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"flights"
									]
								}
							},
							"response": []
						},
						{
							"name": "check order 2 hotel booking rolled back",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check order 2 payment rejected\", function () {",
											"",
											"    var expectedBooking =     {",
											"        \"hotelBookingId\": parseInt(pm.globals.get(\"orderId2\")) - 3,",
											"        \"orderId\": parseInt(pm.globals.get(\"orderId2\")),",
											"        \"hotelId\": 15,",
											"        \"hotelBookingStatus\": \"ROLLED_BACK\"",
											"    };",
											"",
											"    pm.expect(pm.response.json()).to.deep.include(expectedBooking);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hotelsBookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hotelsBookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "order 3 -- try to buy tour no flight available",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"orderId3\", jsonData.orderId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Request-User",
										"value": "{{customerId1}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 5,\n    \"tourId\": {{tourId2}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "check order 3 rejected because flight booking rejected",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check order 3 payment rejected\", function () {",
											"",
											"    var expectedOrder = {",
											"        \"orderId\": parseInt(pm.globals.get(\"orderId3\")),",
											"        \"tourId\": parseInt(pm.globals.get(\"tourId2\")),",
											"        \"userId\": parseInt(pm.globals.get(\"customerId1\")),",
											"        \"paymentStatus\": \"APPROVED\",",
											"        \"flightBookingStatus\": \"REJECTED\",",
											"        \"hotelBookingStatus\": \"APPROVED\",",
											"        \"overallStatus\": \"REJECTED\"",
											"    };",
											"",
											"    pm.expect(pm.response.json()).to.deep.include(expectedOrder);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 4000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "order 4 -- try to buy tour no hotel available",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.globals.set(\"orderId4\", jsonData.orderId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Auth-Request-User",
										"value": "{{customerId1}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tourId\": {{tourId5}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "check order 4 rejected because hotel booking rejected",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check order 4 hotel booking rejected\", function () {",
											"",
											"    var expectedOrder = {",
											"        \"orderId\": parseInt(pm.globals.get(\"orderId4\")),",
											"        \"tourId\": parseInt(pm.globals.get(\"tourId5\")),",
											"        \"userId\": parseInt(pm.globals.get(\"customerId1\")),",
											"        \"paymentStatus\": \"APPROVED\",",
											"        \"flightBookingStatus\": \"APPROVED\",",
											"        \"hotelBookingStatus\": \"REJECTED\",",
											"        \"overallStatus\": \"REJECTED\"",
											"    };",
											"",
											"    pm.expect(pm.response.json()).to.deep.include(expectedOrder);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 4000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "check successfulOrders search index updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check successful order index updated\", function () {",
											"",
											"    var expectedOrder =     {",
											"        \"successfulOrderId\": ",
											"        parseInt(pm.globals.get(\"tourId5\")) + 1,",
											"        \"tourId\": parseInt(pm.globals.get(\"tourId1\")),",
											"        \"tourName\": \"Mountains view\",",
											"        \"tourDescription\": \"You will be skiing in most beautiful mountans in Europe\",",
											"        \"price\": 3500,",
											"        \"fromDate\": \"2021-07-15T00:00:00Z\",",
											"        \"toDate\": \"2021-07-22T00:00:00Z\",",
											"        \"fromDestination\": \"Moscow\",",
											"        \"toDestination\": \"Murmansk\",",
											"        \"hotelId\": 5,",
											"        \"userId\": parseInt(pm.globals.get(\"customerId1\")),",
											"        \"userName\": \"Alex\",",
											"        \"overallOrderStatus\": \"APPROVED\"",
											"    };",
											"",
											"    pm.expect(pm.response.json()).to.deep.include(expectedOrder);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/successfulOrders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"successfulOrders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "payments service test Copy",
					"item": [
						{
							"name": "get all payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/payments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "flights service Copy",
					"item": [
						{
							"name": "get all flights",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/flights",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"flights"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "hotels service Copy",
					"item": [
						{
							"name": "get all hotel bookings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": 5,\n    \"tourId\": 4\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hotelsBookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hotelsBookings"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}